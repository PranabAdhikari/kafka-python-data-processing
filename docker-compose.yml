version: '2'

services:
  # Zookeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181  # Map external port to internal Zookeeper port
    networks:
      - kafka-network

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper  # Depend on Zookeeper service
    ports:
      - 9092:9092   # Map external port to internal Kafka port
      - 29092:29092  # Map external port to internal Kafka port for external access
    networks:
      - kafka-network
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka:9092,LISTENER_EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  # Python producer service
  my-python-producer:
    image: mpradeep954/fetch-de-data-gen
    depends_on:
      - kafka  # Depend on Kafka service
    restart: on-failure:10
    ports:
      - 9093:9093  # Map external port to internal producer port
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: user-login
    networks:
      - kafka-network

  # Python consumer service
  my-python-consumer:
    image: python:3.11  
    depends_on:
      - kafka  # Depend on Kafka service
    restart: on-failure:10
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: user-login
    networks:
      - kafka-network
    volumes:
      - ./consumer.py:/app/consumer.py  # Mount local consumer script into the container

# Define a custom bridge network for the Kafka services
networks:
  kafka-network:
    driver: bridge
